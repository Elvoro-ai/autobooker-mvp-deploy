name: Deploy to Vercel

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Job de tests de qualit√©
  quality-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Type checking
        run: npm run type-check
      
      - name: Linting
        run: npm run lint
      
      - name: Security audit
        run: npm audit --audit-level high
        continue-on-error: true

  # Job de tests de performance
  performance-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build for testing
        run: npm run build
      
      - name: Performance audit
        run: |
          npx lighthouse-ci autorun --config=./lighthouse.config.js || true

  # D√©ploiement preview
  deploy-preview:
    runs-on: ubuntu-latest
    needs: [quality-checks]
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: echo "url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})" >> $GITHUB_OUTPUT
      
      - name: Comment Preview URL
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const { owner, repo } = context.repo;
            const { number } = context.issue;
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body: `üöÄ **Preview d√©ploy√© avec succ√®s!**\n\nüì± **URL Preview:** ${{ steps.deploy.outputs.url }}\n\n‚úÖ Tests qualit√©: Pass√©s\nüîí S√©curit√©: V√©rifi√©e\n‚ö° Performance: Optimis√©e\n\n*D√©ploy√© automatiquement via GitHub Actions*`
            });

  # D√©ploiement production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [quality-checks]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Deploy Project Artifacts to Vercel
        id: deploy-prod
        run: echo "url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})" >> $GITHUB_OUTPUT
      
      - name: Health Check Post-Deploy
        run: |
          sleep 30
          curl -f ${{ steps.deploy-prod.outputs.url }}/api/health || exit 1
          echo "‚úÖ Health check passed"
      
      - name: Load Test Post-Deploy
        run: |
          sleep 10
          curl -X GET "${{ steps.deploy-prod.outputs.url }}/api/test?type=realistic_user_simulation&quick=true" \
            -H "Authorization: Bearer ${{ secrets.LOAD_TEST_API_KEY }}" || echo "‚ö†Ô∏è Load test skipped"
      
      - name: Deployment Success Notification
        if: success()
        run: |
          echo "üéâ D√©ploiement production r√©ussi!"
          echo "URL: ${{ steps.deploy-prod.outputs.url }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"

  # Tests post-d√©ploiement
  post-deploy-tests:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Wait for deployment stabilization
        run: sleep 60
      
      - name: Smoke Tests
        run: |
          # Test des endpoints critiques
          curl -f https://autobooker-mvp-deploy.vercel.app/ || exit 1
          curl -f https://autobooker-mvp-deploy.vercel.app/api/health || exit 1
          echo "‚úÖ Smoke tests passed"
      
      - name: Security Quick Scan
        run: |
          # Test de s√©curit√© rapide
          response=$(curl -s -o /dev/null -w "%{http_code}" https://autobooker-mvp-deploy.vercel.app/api/ai -X POST -d '{"message":"<script>alert(1)</script>"}' -H "Content-Type: application/json")
          if [ $response -eq 200 ] || [ $response -eq 400 ]; then
            echo "‚úÖ XSS protection working"
          else
            echo "‚ùå Unexpected response: $response"
            exit 1
          fi